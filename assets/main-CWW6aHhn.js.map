{"version":3,"file":"main-CWW6aHhn.js","sources":["../../src/js/main.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nclass EarthScene {\n  constructor() {\n    // Create canvas if it doesn't exist\n    this.canvas = document.querySelector('#earth-canvas');\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.canvas.id = 'earth-canvas';\n      document.body.insertBefore(this.canvas, document.body.firstChild);\n    }\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true,\n      alpha: true,\n      powerPreference: \"high-performance\"\n    });\n\n    this.controls = null;\n    this.earth = null;\n    this.stars = null;\n    this.textureLoader = new THREE.TextureLoader();\n    this.textureLoader.setPath('./textures/');\n\n    // Initialize scene\n    this.init();\n  }\n\n  init() {\n    // Setup renderer\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    this.renderer.setClearColor(0x000000, 0);\n\n    // Setup camera\n    this.camera.position.z = 5;\n\n    // Setup controls\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.05;\n    this.controls.rotateSpeed = 0.5;\n    this.controls.enableZoom = false;\n\n    // Create Earth\n    this.createEarth();\n    \n    // Create stars\n    this.createStars();\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    this.scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 3, 5);\n    this.scene.add(directionalLight);\n\n    // Handle window resize\n    window.addEventListener('resize', this.onWindowResize.bind(this));\n\n    // Start animation loop\n    this.animate();\n  }\n\n  createEarth() {\n    // Earth geometry\n    const geometry = new THREE.SphereGeometry(2, 64, 64);\n    \n    // Load Earth textures with error handling\n    const loadTexture = (name) => {\n      return new Promise((resolve) => {\n        this.textureLoader.load(\n          name,\n          (texture) => resolve(texture),\n          undefined,\n          () => {\n            console.warn(`Failed to load texture: ${name}`);\n            resolve(null);\n          }\n        );\n      });\n    };\n\n    // Load all textures\n    Promise.all([\n      loadTexture('earth_daymap.jpg'),\n      loadTexture('earth_normal.jpg'),\n      loadTexture('earth_specular.jpg')\n    ]).then(([dayMap, normalMap, specularMap]) => {\n      // Earth material with textures\n      const material = new THREE.MeshPhongMaterial({\n        map: dayMap,\n        normalMap: normalMap,\n        specularMap: specularMap,\n        normalScale: new THREE.Vector2(0.5, 0.5),\n        shininess: 25\n      });\n\n      this.earth = new THREE.Mesh(geometry, material);\n      \n      // Add atmosphere\n      const atmosphereGeometry = new THREE.SphereGeometry(2.1, 64, 64);\n      const atmosphereMaterial = new THREE.MeshPhongMaterial({\n        color: 0x0077ff,\n        transparent: true,\n        opacity: 0.2,\n        side: THREE.BackSide\n      });\n      const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n      \n      // Create a group for Earth and atmosphere\n      this.earthGroup = new THREE.Group();\n      this.earthGroup.add(this.earth);\n      this.earthGroup.add(atmosphere);\n      \n      // Tilt Earth's axis (23.5 degrees)\n      this.earthGroup.rotation.z = THREE.MathUtils.degToRad(23.5);\n      \n      this.scene.add(this.earthGroup);\n    });\n  }\n\n  createStars() {\n    const starsGeometry = new THREE.BufferGeometry();\n    const starsMaterial = new THREE.PointsMaterial({\n      color: 0xFFFFFF,\n      size: 0.1,\n      transparent: true\n    });\n\n    const starsVertices = [];\n    for (let i = 0; i < 10000; i++) {\n      const x = (Math.random() - 0.5) * 2000;\n      const y = (Math.random() - 0.5) * 2000;\n      const z = -Math.random() * 2000;\n      starsVertices.push(x, y, z);\n    }\n\n    starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starsVertices, 3));\n    this.stars = new THREE.Points(starsGeometry, starsMaterial);\n    this.scene.add(this.stars);\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n\n    // Rotate Earth\n    if (this.earthGroup) {\n      this.earthGroup.rotation.y += 0.001;\n    }\n\n    // Update controls\n    this.controls.update();\n\n    // Render scene\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Ensure WebGL is available\n  if (!window.WebGLRenderingContext) {\n    console.error('WebGL is not available in your browser');\n    return;\n  }\n\n  try {\n    new EarthScene();\n  } catch (error) {\n    console.error('Error initializing Earth scene:', error);\n  }\n});"],"names":["EarthScene","constructor","this","canvas","document","querySelector","createElement","id","body","insertBefore","firstChild","scene","THREE.Scene","camera","THREE.PerspectiveCamera","window","innerWidth","innerHeight","renderer","THREE.WebGLRenderer","antialias","alpha","powerPreference","controls","earth","stars","textureLoader","THREE.TextureLoader","setPath","init","setSize","setPixelRatio","Math","min","devicePixelRatio","setClearColor","position","z","OrbitControls","domElement","enableDamping","dampingFactor","rotateSpeed","enableZoom","createEarth","createStars","ambientLight","THREE.AmbientLight","add","directionalLight","THREE.DirectionalLight","set","addEventListener","onWindowResize","bind","animate","geometry","THREE.SphereGeometry","loadTexture","name","Promise","resolve","load","texture","console","warn","all","then","dayMap","normalMap","specularMap","material","THREE.MeshPhongMaterial","map","normalScale","THREE.Vector2","shininess","THREE.Mesh","atmosphereGeometry","atmosphereMaterial","color","transparent","opacity","side","THREE.BackSide","atmosphere","earthGroup","THREE.Group","rotation","THREE.MathUtils","degToRad","starsGeometry","THREE.BufferGeometry","starsMaterial","THREE.PointsMaterial","size","starsVertices","i","x","random","y","push","setAttribute","THREE.Float32BufferAttribute","THREE.Points","aspect","updateProjectionMatrix","requestAnimationFrame","update","render","WebGLRenderingContext","error"],"mappings":"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"}